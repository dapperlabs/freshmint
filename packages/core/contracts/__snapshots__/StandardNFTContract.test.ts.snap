// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`StandardNFTContract should generate a contract 1`] = `
"import NonFungibleToken from 0xf8d6e0586b0a20c7
import MetadataViews from 0xf8d6e0586b0a20c7
import FungibleToken from 0xee82856bf20e2aa6

pub contract StandardNFT_Test: NonFungibleToken {

    pub let version: String

    pub event ContractInitialized()
    pub event Withdraw(id: UInt64, from: Address?)
    pub event Deposit(id: UInt64, to: Address?)
    pub event Minted(id: UInt64)
    pub event Burned(id: UInt64)

    pub let CollectionStoragePath: StoragePath
    pub let CollectionPublicPath: PublicPath
    pub let CollectionPrivatePath: PrivatePath
    pub let AdminStoragePath: StoragePath

    /// The total number of StandardNFT_Test NFTs that have been minted.
    ///
    pub var totalSupply: UInt64

    /// A list of royalty recipients that is attached to all NFTs
    /// minted by this contract.
    ///
    access(contract) var royalties: [MetadataViews.Royalty]
    
    /// Return the royalty recipients for this contract.
    ///
    pub fun getRoyalties(): [MetadataViews.Royalty] {
        return StandardNFT_Test.royalties
    }

    pub struct Metadata {

        pub let name: String
        pub let description: String
        pub let thumbnail: String
        pub let serialNumber: UInt64

        init(
            name: String,
            description: String,
            thumbnail: String,
            serialNumber: UInt64,
        ) {
            self.name = name
            self.description = description
            self.thumbnail = thumbnail
            self.serialNumber = serialNumber
        }

        /// Encode this metadata object as a byte array.
        ///
        /// This can be used to hash the metadata and verify its integrity.
        ///
        pub fun encode(): [UInt8] {
            return self.name.utf8
                .concat(self.description.utf8)
                .concat(self.thumbnail.utf8)
                .concat(self.serialNumber.toBigEndianBytes())
        }

        pub fun hash(): [UInt8] {
            return HashAlgorithm.SHA3_256.hash(self.encode())
        }
    }

    /// This dictionary holds the metadata for all NFTs
    /// minted by this contract.
    ///
    access(contract) let metadata: {UInt64: Metadata}

    /// Return the metadata for an NFT.
    ///
    pub fun getMetadata(nftID: UInt64): Metadata? {
        return StandardNFT_Test.metadata[nftID]
    }

    /// This dictionary stores all NFT IDs minted by this contract
    /// indexed by their metadata hash.
    ///
    /// It is populated at mint time and used to prevent duplicate mints.
    ///
    access(contract) let nftsByHash: {String: UInt64}

    pub fun getNFTIDByHash(hash: String): UInt64? {
        return StandardNFT_Test.nftsByHash[hash]
    }

    pub resource NFT: NonFungibleToken.INFT, MetadataViews.Resolver {

        pub let id: UInt64

        init() {
            self.id = self.uuid
        }

        /// Return the metadata for this NFT.
        ///
        pub fun getMetadata(): Metadata {
            return StandardNFT_Test.metadata[self.id]!
        }

        pub fun getViews(): [Type] {
            return [
                Type<MetadataViews.NFTView>(),
                Type<MetadataViews.Display>(),
                Type<MetadataViews.ExternalURL>(),
                Type<MetadataViews.NFTCollectionDisplay>(),
                Type<MetadataViews.NFTCollectionData>(),
                Type<MetadataViews.Royalties>(),
                Type<MetadataViews.Serial>()
            ]
        }

        pub fun resolveView(_ view: Type): AnyStruct? {
            let metadata = self.getMetadata()

            switch view {
                case Type<MetadataViews.NFTView>():
                    return self.resolveNFTView(metadata)
                case Type<MetadataViews.Display>():
                    return self.resolveDisplay(metadata)
                case Type<MetadataViews.ExternalURL>():
                    return self.resolveExternalURL()
                case Type<MetadataViews.NFTCollectionDisplay>():
                    return self.resolveNFTCollectionDisplay()
                case Type<MetadataViews.NFTCollectionData>():
                    return self.resolveNFTCollectionData()
                case Type<MetadataViews.Royalties>():
                    return self.resolveRoyalties()
                case Type<MetadataViews.Serial>():
                    return self.resolveSerial(metadata)
            }

            return nil
        }

        pub fun resolveNFTView(_ metadata: Metadata): MetadataViews.NFTView {
            return MetadataViews.NFTView(
                id: self.id,
                uuid: self.uuid,
                display: self.resolveDisplay(metadata),
                externalURL: self.resolveExternalURL(),
                collectionData: self.resolveNFTCollectionData(),
                collectionDisplay: self.resolveNFTCollectionDisplay(),
                royalties : self.resolveRoyalties(),
                traits: nil
            )
        }
        
        pub fun resolveDisplay(_ metadata: Metadata): MetadataViews.Display {
            return MetadataViews.Display(
                name: metadata.name,
                description: metadata.description,
                thumbnail: MetadataViews.IPFSFile(cid: metadata.thumbnail, path: nil)
            )
        }
        
        pub fun resolveExternalURL(): MetadataViews.ExternalURL {
            return MetadataViews.ExternalURL(\\"http://foo.com/\\".concat(self.id.toString()))
        }
        
        pub fun resolveNFTCollectionDisplay(): MetadataViews.NFTCollectionDisplay {
            let media = MetadataViews.Media(
                file: MetadataViews.IPFSFile(
                    cid: \\"bafkreicrfbblmaduqg2kmeqbymdifawex7rxqq2743mitmeia4zdybmmre\\", 
                    path: nil
                ),
                mediaType: \\"image/jpeg\\"
            )
        
            return MetadataViews.NFTCollectionDisplay(
                name: \\"My Collection\\",
                description: \\"This is my collection.\\",
                externalURL: MetadataViews.ExternalURL(\\"http://foo.com\\"),
                squareImage: media,
                bannerImage: media,
                socials: {}
            )
        }
        
        pub fun resolveNFTCollectionData(): MetadataViews.NFTCollectionData {
            return MetadataViews.NFTCollectionData(
                storagePath: StandardNFT_Test.CollectionStoragePath,
                publicPath: StandardNFT_Test.CollectionPublicPath,
                providerPath: StandardNFT_Test.CollectionPrivatePath,
                publicCollection: Type<&StandardNFT_Test.Collection{StandardNFT_Test.StandardNFT_TestCollectionPublic}>(),
                publicLinkedType: Type<&StandardNFT_Test.Collection{StandardNFT_Test.StandardNFT_TestCollectionPublic, NonFungibleToken.CollectionPublic, NonFungibleToken.Receiver, MetadataViews.ResolverCollection}>(),
                providerLinkedType: Type<&StandardNFT_Test.Collection{StandardNFT_Test.StandardNFT_TestCollectionPublic, NonFungibleToken.CollectionPublic, NonFungibleToken.Provider, MetadataViews.ResolverCollection}>(),
                createEmptyCollectionFunction: (fun (): @NonFungibleToken.Collection {
                    return <-StandardNFT_Test.createEmptyCollection()
                })
            )
        }
        
        pub fun resolveRoyalties(): MetadataViews.Royalties {
            return MetadataViews.Royalties(StandardNFT_Test.royalties)
        }
        
        pub fun resolveSerial(_ metadata: Metadata): MetadataViews.Serial {
            return MetadataViews.Serial(metadata.serialNumber)
        }
        
        destroy() {
            StandardNFT_Test.totalSupply = StandardNFT_Test.totalSupply - (1 as UInt64)

            emit Burned(id: self.id)
        }
    }

    pub resource interface StandardNFT_TestCollectionPublic {
        pub fun deposit(token: @NonFungibleToken.NFT)
        pub fun getIDs(): [UInt64]
        pub fun borrowNFT(id: UInt64): &NonFungibleToken.NFT
        pub fun borrowStandardNFT_Test(id: UInt64): &StandardNFT_Test.NFT? {
            post {
                (result == nil) || (result?.id == id):
                    \\"Cannot borrow StandardNFT_Test reference: The ID of the returned reference is incorrect\\"
            }
        }
    }
    
    /// Collection is a container for StandardNFT_Test NFTs.
    ///
    /// A StandardNFT_Test collection preserves the insertion order of its contents.
    ///
    pub resource Collection: StandardNFT_TestCollectionPublic, NonFungibleToken.Provider, NonFungibleToken.Receiver, NonFungibleToken.CollectionPublic, MetadataViews.ResolverCollection {
        
        /// An array of all NFT IDs in this collection in insertion order.
        ///
        pub let ids: [UInt64]
    
        /// A dictionary of all NFTs in this collection indexed by ID.
        ///
        pub var ownedNFTs: @{UInt64: NonFungibleToken.NFT}
    
        init () {
            self.ids = []
            self.ownedNFTs <- {}
        }
    
        /// Remove an NFT from this collection and move it to the caller.
        ///
        pub fun withdraw(withdrawID: UInt64): @NonFungibleToken.NFT {
            let token <- self.ownedNFTs.remove(key: withdrawID) 
                ?? panic(\\"Requested NFT to withdraw does not exist in this collection\\")
    
            // Remove the NFT ID from the IDs list
            let index = self.ids.firstIndex(of: token.id)!
            self.ids.remove(at: index)
    
            emit Withdraw(id: token.id, from: self.owner?.address)
    
            return <- token
        }
    
        /// Deposit an NFT into this collection.
        ///
        pub fun deposit(token: @NonFungibleToken.NFT) {
            let token <- token as! @StandardNFT_Test.NFT
    
            let id: UInt64 = token.id
    
            // Add the new NFT to the dictionary.
            //
            // Because ownedNFTs is an array of resources,
            // it is technically possible for it to contain an existing resource
            // for any given key. Resources cannot be silenty overwritten
            // so we must explicity destory it.
            //
            // However, the existing token should always be nil.
            //
            let oldToken <- self.ownedNFTs[id] <- token
            if (oldToken != nil) {
                panic(\\"Collection already contains an NFT with that ID\\")
            }
    
            destroy oldToken
    
            // Add the NFT ID to the end of the IDs list
            self.ids.append(id)
    
            emit Deposit(id: id, to: self.owner?.address)
        }
    
        /// Return an array of the NFT IDs in this collection.
        ///
        /// The array will be in insertion order.
        ///
        pub fun getIDs(): [UInt64] {
            return self.ids
        }
    
        /// Return a reference to an NFT in this collection.
        ///
        /// This function panics if the NFT does not exist in this collection.
        ///
        pub fun borrowNFT(id: UInt64): &NonFungibleToken.NFT {
            return (&self.ownedNFTs[id] as &NonFungibleToken.NFT?)!
        }
    
        /// Return a reference to an NFT in this collection
        /// typed as StandardNFT_Test.NFT.
        ///
        /// This function returns nil if the NFT does not exist in this collection.
        ///
        pub fun borrowStandardNFT_Test(id: UInt64): &StandardNFT_Test.NFT? {
            if self.ownedNFTs[id] != nil {
                let ref = (&self.ownedNFTs[id] as auth &NonFungibleToken.NFT?)!
                return ref as! &StandardNFT_Test.NFT
            }
    
            return nil
        }
    
        /// Return a reference to an NFT in this collection
        /// typed as MetadataViews.Resolver.
        ///
        /// This function panics if the NFT does not exist in this collection.
        ///
        pub fun borrowViewResolver(id: UInt64): &AnyResource{MetadataViews.Resolver} {
            let nft = (&self.ownedNFTs[id] as auth &NonFungibleToken.NFT?)!
            let nftRef = nft as! &StandardNFT_Test.NFT
            return nftRef as &AnyResource{MetadataViews.Resolver}
        }
    
        destroy() {
            destroy self.ownedNFTs
        }
    }
    
    /// Return a new empty collection.
    ///
    pub fun createEmptyCollection(): @NonFungibleToken.Collection {
        return <- create Collection()
    }

    /// The administrator resource used to mint and reveal NFTs.
    ///
    pub resource Admin {

        /// Mint a new NFT.
        ///
        /// To mint an NFT, specify a value for each of its metadata fields.
        ///
        pub fun mintNFT(
            name: String,
            description: String,
            thumbnail: String,
            serialNumber: UInt64,
        ): @StandardNFT_Test.NFT {

            let metadata = Metadata(
                name: name,
                description: description,
                thumbnail: thumbnail,
                serialNumber: serialNumber,
            )

            let hexHash = String.encodeHex(metadata.hash())

            // Prevent multiple NFTs from being minted with the same metadata hash
            assert(
                StandardNFT_Test.nftsByHash[hexHash] == nil,
                message: \\"an NFT has already been minted with hash=\\".concat(hexHash)
            )

            let nft <- create StandardNFT_Test.NFT()

            // Save the metadata
            StandardNFT_Test.metadata[nft.id] = metadata

            // Save the metadata hash
            StandardNFT_Test.nftsByHash[hexHash] = nft.id

            emit Minted(id: nft.id)

            StandardNFT_Test.totalSupply = StandardNFT_Test.totalSupply + (1 as UInt64)

            return <- nft
        }

        /// Set the royalty recipients for this contract.
        ///
        /// This function updates the royalty recipients for all NFTs
        /// minted by this contract.
        ///
        pub fun setRoyalties(_ royalties: [MetadataViews.Royalty]) {
            StandardNFT_Test.royalties = royalties
        }
    }

    /// Return a public path that is scoped to this contract.
    ///
    pub fun getPublicPath(suffix: String): PublicPath {
        return PublicPath(identifier: \\"StandardNFT_Test_\\".concat(suffix))!
    }

    /// Return a private path that is scoped to this contract.
    ///
    pub fun getPrivatePath(suffix: String): PrivatePath {
        return PrivatePath(identifier: \\"StandardNFT_Test_\\".concat(suffix))!
    }

    /// Return a storage path that is scoped to this contract.
    ///
    pub fun getStoragePath(suffix: String): StoragePath {
        return StoragePath(identifier: \\"StandardNFT_Test_\\".concat(suffix))!
    }

    priv fun initAdmin(admin: AuthAccount) {
        // Create an empty collection and save it to storage
        let collection <- StandardNFT_Test.createEmptyCollection()

        admin.save(<- collection, to: StandardNFT_Test.CollectionStoragePath)

        admin.link<&StandardNFT_Test.Collection>(StandardNFT_Test.CollectionPrivatePath, target: StandardNFT_Test.CollectionStoragePath)

        admin.link<&StandardNFT_Test.Collection{NonFungibleToken.CollectionPublic, StandardNFT_Test.StandardNFT_TestCollectionPublic, MetadataViews.ResolverCollection}>(StandardNFT_Test.CollectionPublicPath, target: StandardNFT_Test.CollectionStoragePath)
        
        // Create an admin resource and save it to storage
        let adminResource <- create Admin()

        admin.save(<- adminResource, to: self.AdminStoragePath)
    }

    init(admin: AuthAccount) {

        self.version = \\"0.0.32\\"

        self.CollectionPublicPath = StandardNFT_Test.getPublicPath(suffix: \\"Collection\\")
        self.CollectionStoragePath = StandardNFT_Test.getStoragePath(suffix: \\"Collection\\")
        self.CollectionPrivatePath = StandardNFT_Test.getPrivatePath(suffix: \\"Collection\\")

        self.AdminStoragePath = StandardNFT_Test.getStoragePath(suffix: \\"Admin\\")

        self.royalties = []

        self.totalSupply = 0

        self.metadata = {}
        self.nftsByHash = {}

        self.initAdmin(admin: admin)

        emit ContractInitialized()
    }
}
"
`;
