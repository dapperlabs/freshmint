// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ExternalURLView accepts a complete Cadence expression 1`] = `
"pub fun resolveExternalURL(): MetadataViews.ExternalURL {
    return MetadataViews.ExternalURL(\\"http://foo.com/nfts/\\".concat(self.id))
}
"
`;

exports[`ExternalURLView accepts a raw template that uses all variables 1`] = `
"pub fun resolveExternalURL(): MetadataViews.ExternalURL {
    let collectionURL = Foo.collectionMetadata!.externalURL.url
    let nftOwner = self.owner!.address.toString()
    let nftID = self.id.toString()
    return MetadataViews.ExternalURL(collectionURL.concat(\\"/nfts/\\").concat(nftOwner).concat(\\"/\\").concat(nftID))
}
"
`;

exports[`ExternalURLView accepts a raw template that uses no variables 1`] = `
"pub fun resolveExternalURL(): MetadataViews.ExternalURL {
    return MetadataViews.ExternalURL(\\"https://foo.com\\")
}
"
`;

exports[`ExternalURLView accepts a raw template that uses the \${collection.url} variable 1`] = `
"pub fun resolveExternalURL(): MetadataViews.ExternalURL {
    let collectionURL = Foo.collectionMetadata!.externalURL.url
    return MetadataViews.ExternalURL(collectionURL.concat(\\"/nfts\\"))
}
"
`;

exports[`ExternalURLView accepts a raw template that uses the \${nft.id} variable 1`] = `
"pub fun resolveExternalURL(): MetadataViews.ExternalURL {
    let nftID = self.id.toString()
    return MetadataViews.ExternalURL(\\"http://foo.com/\\".concat(nftID))
}
"
`;

exports[`ExternalURLView accepts a raw template that uses the \${nft.owner} variable 1`] = `
"pub fun resolveExternalURL(): MetadataViews.ExternalURL {
    let nftOwner = self.owner!.address.toString()
    return MetadataViews.ExternalURL(\\"http://foo.com/\\".concat(nftOwner))
}
"
`;

exports[`NFTCollectionDisplayView generates a Cadence snippet with an HTTP media file 1`] = `
"pub fun resolveNFTCollectionDisplay(): MetadataViews.NFTCollectionDisplay? {
    let media = MetadataViews.Media(
        file: MetadataViews.HTTPFile(url: \\"http://foo.com/nft.jpeg\\"),
        mediaType: \\"image/jpeg\\"
    )

    return MetadataViews.NFTCollectionDisplay(
        name: \\"Foo NFT Collection\\",
        description: \\"This is the Foo NFT collection.\\",
        externalURL: MetadataViews.ExternalURL(\\"http://foo.com\\"),
        squareImage: media,
        bannerImage: media,
        socials: {}
    )
}
"
`;

exports[`NFTCollectionDisplayView generates a Cadence snippet with an IPFS media file with a path 1`] = `
"pub fun resolveNFTCollectionDisplay(): MetadataViews.NFTCollectionDisplay? {
    let media = MetadataViews.Media(
        file: MetadataViews.IPFSFile(
            cid: \\"bafkreicrfbblmaduqg2kmeqbymdifawex7rxqq2743mitmeia4zdybmmre\\", 
            path: \\"foo.jpeg\\"
        ),
        mediaType: \\"image/jpeg\\"
    )

    return MetadataViews.NFTCollectionDisplay(
        name: \\"Foo NFT Collection\\",
        description: \\"This is the Foo NFT collection.\\",
        externalURL: MetadataViews.ExternalURL(\\"http://foo.com\\"),
        squareImage: media,
        bannerImage: media,
        socials: {}
    )
}
"
`;

exports[`NFTCollectionDisplayView generates a Cadence snippet with an IPFS media file with no path 1`] = `
"pub fun resolveNFTCollectionDisplay(): MetadataViews.NFTCollectionDisplay? {
    let media = MetadataViews.Media(
        file: MetadataViews.IPFSFile(
            cid: \\"bafkreicrfbblmaduqg2kmeqbymdifawex7rxqq2743mitmeia4zdybmmre\\", 
            path: nil
        ),
        mediaType: \\"image/jpeg\\"
    )

    return MetadataViews.NFTCollectionDisplay(
        name: \\"Foo NFT Collection\\",
        description: \\"This is the Foo NFT collection.\\",
        externalURL: MetadataViews.ExternalURL(\\"http://foo.com\\"),
        squareImage: media,
        bannerImage: media,
        socials: {}
    )
}
"
`;

exports[`NFTCollectionDisplayView returns the collectionMetadata field when no options are passed 1`] = `
"pub fun resolveNFTCollectionDisplay(): MetadataViews.NFTCollectionDisplay? {
    return Foo.collectionMetadata
}
"
`;

exports[`SerialView generates a Cadence snippet 1`] = `
"pub fun resolveSerial(_ metadata: Metadata): MetadataViews.Serial {
    return MetadataViews.Serial(metadata.serialNumber)
}
"
`;
